/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views.dashBoards;

import interlacedventures.Transport;
import java.util.Date;
import javax.swing.table.DefaultTableModel;
import models.BillsDirectory;
import models.OrdersDirectory;
import models.RentalOrder;
import models.RentalOrderDirectory;
import models.Storage;
import models.StorageDirectory;
import models.TransportDirectory;
import models.bills;
import models.orders;

/**
 *
 * @author kcsar
 */
public class ViewItemsOperation extends javax.swing.JFrame {

    /**
     * Creates new form ViewItemsOperation
     */
    public ViewItemsOperation() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOpReq = new javax.swing.JTable();
        lblReqOp = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnDisapprove = new javax.swing.JButton();
        btnApprove = new javax.swing.JButton();
        btnDetails = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblOpReq.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblOpReq);

        lblReqOp.setText("jLabel1");

        btnBack.setText("BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnDisapprove.setText("DISAPPROVE");
        btnDisapprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisapproveActionPerformed(evt);
            }
        });

        btnApprove.setText("APPROVE");
        btnApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveActionPerformed(evt);
            }
        });

        btnDetails.setText("VIEW DETAILS");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(btnDetails)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addComponent(btnApprove)
                .addGap(62, 62, 62)
                .addComponent(btnDisapprove)
                .addGap(57, 57, 57)
                .addComponent(btnBack)
                .addGap(70, 70, 70))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(296, 296, 296)
                .addComponent(lblReqOp, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(138, 138, 138)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(lblReqOp)
                .addGap(33, 33, 33)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnDisapprove)
                    .addComponent(btnApprove)
                    .addComponent(btnDetails))
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        this.hide();
        OperationsAdminDashboard oadb = new OperationsAdminDashboard();
        oadb.show();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveActionPerformed
        // TODO add your handling code here:
        float amt = 0;
        int rctno = 0;
       
        DefaultTableModel tableModel = (DefaultTableModel) tblOpReq.getModel();
        String orderID = tableModel.getValueAt(tblOpReq.getSelectedRow(), 6).toString();
        System.out.println(orderID);
        String id = tableModel.getValueAt(tblOpReq.getSelectedRow(), 4).toString();
        String service = tblOpReq.getValueAt(tblOpReq.getSelectedRow(), 2).toString();
        
        if(id.length() == 6){
            System.out.println("1");
            for(int i = 0; i < StorageDirectory.getInstance().getStorageDir().size(); i++){
                System.out.println("2");
                if(StorageDirectory.getInstance().getStorageDir().get(i).getStorageID() == Integer.parseInt(id)){
                    System.out.println("3");
                    amt = StorageDirectory.getInstance().getStorageDir().get(i).getRate();
                    
                    Storage storage = new Storage(
                            Integer.parseInt(id),
                            StorageDirectory.getInstance().getStorageDir().get(i).getSize(),
                            StorageDirectory.getInstance().getStorageDir().get(i).getType(),
                            StorageDirectory.getInstance().getStorageDir().get(i).getRate(),
                            false,
                            tableModel.getValueAt(tblOpReq.getSelectedRow(), 5).toString(),
                            StorageDirectory.getInstance().getStorageDir().get(i).getPrice(),
                            new Date()
                    );
                    
                    StorageDirectory.getInstance().updateStorage(storage, i);
                    
                    for(int k = 0; k < RentalOrderDirectory.getInstance().getRentalOrdersDir().size(); k++){
                        System.out.println("4");
                        if(RentalOrderDirectory.getInstance().getRentalOrdersDir().get(k).getOrderID().equals(orderID)){
                            System.out.println("5");
                            RentalOrder Ro = new RentalOrder(
                                    orderID,
                                    RentalOrderDirectory.getInstance().getRentalOrdersDir().get(k).getOrderID(),
                                    RentalOrderDirectory.getInstance().getRentalOrdersDir().get(k).getRequestTo(),
                                    RentalOrderDirectory.getInstance().getRentalOrdersDir().get(k).getItem(),
                                    new Date(),
                                    RentalOrderDirectory.getInstance().getRentalOrdersDir().get(k).getItemId(),
                                    "Completed",
                                    RentalOrderDirectory.getInstance().getRentalOrdersDir().get(k).getAmount()
                            );
                            
                            RentalOrderDirectory.getInstance().updateRentalOrder(Ro, k);
                            
                        }
                    }
                    break;
                }
            } 
        }
        
        else if(id.length() == 5){
            for(int i = 0; i < TransportDirectory.getInstance().getTransportDir().size(); i++){
                if(TransportDirectory.getInstance().getTransportDir().get(i).getVehicleNumber().equals(id)){
                    amt = TransportDirectory.getInstance().getTransportDir().get(i).getRate();
                    rctno = i+2500;
                    
                    
                    Transport transport = new Transport(
                        TransportDirectory.getInstance().getTransportDir().get(i).getCarClass(),
                            TransportDirectory.getInstance().getTransportDir().get(i).getCategory(),
                            TransportDirectory.getInstance().getTransportDir().get(i).getModel(),
                            TransportDirectory.getInstance().getTransportDir().get(i).getType(),
                            TransportDirectory.getInstance().getTransportDir().get(i).getRate(),
                            false,
                            tableModel.getValueAt(tblOpReq.getSelectedRow(), 5).toString(),
                            TransportDirectory.getInstance().getTransportDir().get(i).getPrice(),
                            new Date(),
                            id
                    );
                    
                    TransportDirectory.getInstance().updateTransport(transport, i);
                    
                    for(int k = 0; k < RentalOrderDirectory.getInstance().getRentalOrdersDir().size(); i++){
                        if(RentalOrderDirectory.getInstance().getRentalOrdersDir().get(k).getOrderID().equals(orderID)){
                            RentalOrder Ro = new RentalOrder(
                                    orderID,
                                    RentalOrderDirectory.getInstance().getRentalOrdersDir().get(k).getOrderID(),
                                    RentalOrderDirectory.getInstance().getRentalOrdersDir().get(k).getRequestTo(),
                                    RentalOrderDirectory.getInstance().getRentalOrdersDir().get(k).getItem(),
                                    new Date(),
                                    RentalOrderDirectory.getInstance().getRentalOrdersDir().get(k).getItemId(),
                                    "Completed",
                                    RentalOrderDirectory.getInstance().getRentalOrdersDir().get(k).getAmount()
                            );
                            
                            RentalOrderDirectory.getInstance().updateRentalOrder(Ro, k);
                            
                        }
                    }
                    
                    break;
                    }
                }
            } 
            
            bills bill = new bills (
                    tableModel.getValueAt(tblOpReq.getSelectedRow(), 5).toString(),
                    new Date(), 
                    amt, 
                    service, 
                    "Opreations", 
                    rctno);
            BillsDirectory.getInstance().addBill(bill);
                                        
    }//GEN-LAST:event_btnApproveActionPerformed

    private void btnDisapproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisapproveActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tableModel = (DefaultTableModel) tblOpReq.getModel();
        String description = tableModel.getValueAt(tblOpReq.getSelectedRow(), 4).toString();
        
        //for loop to find the relevant selected order in tfrom the given table.
        for(int i = 0; i < OrdersDirectory.getInstance().getOrdersDir().size(); i++){
            
            if(OrdersDirectory.getInstance().getOrdersDir().get(i).getDetails().equals(description)){
                String name = OrdersDirectory.getInstance().getOrdersDir().get(i).getRequestTo();
                
                //for loop to find a relevant employee and add him on the job order object is updated here.
                        orders order = new orders(
                                OrdersDirectory.getInstance().getOrdersDir().get(i).getRole(),
                                OrdersDirectory.getInstance().getOrdersDir().get(i).getAssignedTo(),
                                OrdersDirectory.getInstance().getOrdersDir().get(i).getService(),
                                OrdersDirectory.getInstance().getOrdersDir().get(i).getOrderedBy(),
                                OrdersDirectory.getInstance().getOrdersDir().get(i).getRequestTo(),
                                "Rejected",
                                OrdersDirectory.getInstance().getOrdersDir().get(i).getDate(),
                                OrdersDirectory.getInstance().getOrdersDir().get(i).getAmount(),
                                OrdersDirectory.getInstance().getOrdersDir().get(i).getDetails()
                        );
                        OrdersDirectory.getInstance().updateOrder(order, i);
                        tableModel.removeRow(tblOpReq.getSelectedRow());
                break;
            }
        }
    }//GEN-LAST:event_btnDisapproveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewItemsOperation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewItemsOperation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewItemsOperation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewItemsOperation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewItemsOperation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApprove;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDetails;
    private javax.swing.JButton btnDisapprove;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JLabel lblReqOp;
    public javax.swing.JTable tblOpReq;
    // End of variables declaration//GEN-END:variables
}
