/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views.dashBoards;

import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import models.AuditOrderDirectory;
import models.AuditingOrder;
import models.BillsDirectory;
import models.EmployeeDirectory;
import models.OrdersDirectory;
import models.bills;
import models.orders;

/**
 *
 * @author kcsar
 */
public class ViewItemsFinAndLegal extends javax.swing.JFrame {

    /**
     * Creates new form ViewItemsFinAndLegal
     */
    public ViewItemsFinAndLegal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelFinReq = new javax.swing.JTable();
        labelRequest = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        btnAssign = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tabelFinReq.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ORDERED BY", "ORGANISATION", "SERVICE"
            }
        ));
        jScrollPane1.setViewportView(tabelFinReq);

        labelRequest.setText("Name");

        jButton1.setText("BACK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnAssign.setText("Assign To CA");
        btnAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActionPerformed(evt);
            }
        });

        jButton3.setText("DISAPPROVE");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("VIEW DETAILS");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(jButton4)
                .addGap(68, 68, 68)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addComponent(btnAssign)
                .addGap(110, 110, 110)
                .addComponent(jButton1)
                .addGap(95, 95, 95))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(362, 362, 362)
                        .addComponent(labelRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(labelRequest)
                .addGap(48, 48, 48)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(btnAssign)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addGap(43, 43, 43))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.hide();
        FinAndLegalDashBoard fldb = new FinAndLegalDashBoard();
        fldb.show();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActionPerformed
        // TODO add your handling code here:
        
        float amt = 0;
        int rctno = 0;
        DefaultTableModel tableModel = (DefaultTableModel) tabelFinReq.getModel();
        String service = tableModel.getValueAt(tabelFinReq.getSelectedRow(), 3).toString();
        String name = tabelFinReq.getValueAt(tabelFinReq.getSelectedRow(), 0).toString();
        String Desc = tabelFinReq.getValueAt(tabelFinReq.getSelectedRow(), 2).toString();
        int flag = 0;

        
        
        if(service.equals("Auditing")){
          
          for(int i = 0; i < AuditOrderDirectory.getInstance().getAuditOrderDir().size(); i++){
            if(AuditOrderDirectory.getInstance().getAuditOrderDir().get(i).getDetails().equals(Desc))
                
                //for loop to find a relevant employee and add him on the job order object is updated here.
                for(int j = 0;  j < EmployeeDirectory.getInstance().getEmployeeDir().size(); j++){
                   
                    if(EmployeeDirectory.getInstance().getEmployeeDir().get(j).getRole().equals("Chartered Accountant") && 
                            EmployeeDirectory.getInstance().getEmployeeDir().get(j).isStatus()){
                    
                    
                        AuditingOrder order = new AuditingOrder(
                                AuditOrderDirectory.getInstance().getAuditOrderDir().get(i).getAuditPath(),
                                AuditOrderDirectory.getInstance().getAuditOrderDir().get(i).getRole(),
                                EmployeeDirectory.getInstance().getEmployeeDir().get(j).getUsername(),
                                AuditOrderDirectory.getInstance().getAuditOrderDir().get(i).getService(),
                                name,
                                tabelFinReq.getValueAt(tabelFinReq.getSelectedRow(), 1).toString(),
                                "Assigned",
                                new Date(), 
                                AuditOrderDirectory.getInstance().getAuditOrderDir().get(i).getAmount(),
                                Desc);
                        AuditOrderDirectory.getInstance().updateAuditOrder(order, i);
                        flag++;
                    }
                
                }
            }
        }
        
        
        else{
            
        for(int j = 0;  j < EmployeeDirectory.getInstance().getEmployeeDir().size(); j++){
                   
        if(EmployeeDirectory.getInstance().getEmployeeDir().get(j).getRole().equals("Chartered Accountant") && 
                EmployeeDirectory.getInstance().getEmployeeDir().get(j).isStatus()){
                    
        for(int i = 0; i < OrdersDirectory.getInstance().getOrdersDir().size(); i++){
            if(OrdersDirectory.getInstance().getOrdersDir().get(i).getDetails().equals(Desc)){
                
                orders order = new orders(
                                OrdersDirectory.getInstance().getOrdersDir().get(i).getRole(),
                                EmployeeDirectory.getInstance().getEmployeeDir().get(j).getUsername(),
                                OrdersDirectory.getInstance().getOrdersDir().get(i).getService(),
                                OrdersDirectory.getInstance().getOrdersDir().get(i).getOrderedBy(),
                                OrdersDirectory.getInstance().getOrdersDir().get(i).getRequestTo(),
                                "Assigned",
                                OrdersDirectory.getInstance().getOrdersDir().get(i).getDate(),
                                OrdersDirectory.getInstance().getOrdersDir().get(i).getAmount(),
                                OrdersDirectory.getInstance().getOrdersDir().get(i).getDetails()
                        );
                        OrdersDirectory.getInstance().updateOrder(order, i);
                        flag++;
                break;
                    }
                 }
                }
            }
        }
        
                if(flag == 0){
                JOptionPane.showMessageDialog(this, "You dont have Employess left for this role");
            }
    }//GEN-LAST:event_btnAssignActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tableModel = (DefaultTableModel) tabelFinReq.getModel();
        String description = tableModel.getValueAt(tabelFinReq.getSelectedRow(), 4).toString();
        
        //for loop to find the relevant selected order in tfrom the given table.
        for(int i = 0; i < AuditOrderDirectory.getInstance().getAuditOrderDir().size(); i++){
            
            if(AuditOrderDirectory.getInstance().getAuditOrderDir().get(i).getDetails().equals(description)){
                String name = AuditOrderDirectory.getInstance().getAuditOrderDir().get(i).getRequestTo();
                
                //for loop to find a relevant employee and add him on the job order object is updated here.
                        AuditingOrder audit = new AuditingOrder(
                                AuditOrderDirectory.getInstance().getAuditOrderDir().get(i).getAuditPath(),
                                AuditOrderDirectory.getInstance().getAuditOrderDir().get(i).getRole(),
                                AuditOrderDirectory.getInstance().getAuditOrderDir().get(i).getAssignedTo(),
                                AuditOrderDirectory.getInstance().getAuditOrderDir().get(i).getService(),
                                AuditOrderDirectory.getInstance().getAuditOrderDir().get(i).getOrderedBy(),
                                AuditOrderDirectory.getInstance().getAuditOrderDir().get(i).getRequestTo(),
                                "Rejected",
                                AuditOrderDirectory.getInstance().getAuditOrderDir().get(i).getDate(),
                                AuditOrderDirectory.getInstance().getAuditOrderDir().get(i).getAmount(),
                                AuditOrderDirectory.getInstance().getAuditOrderDir().get(i).getDetails()
                        );
                        AuditOrderDirectory.getInstance().updateAuditOrder(audit, i);
                        tableModel.removeRow(tabelFinReq.getSelectedRow());
                break;
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewItemsFinAndLegal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewItemsFinAndLegal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewItemsFinAndLegal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewItemsFinAndLegal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewItemsFinAndLegal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssign;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JLabel labelRequest;
    public javax.swing.JTable tabelFinReq;
    // End of variables declaration//GEN-END:variables
}
