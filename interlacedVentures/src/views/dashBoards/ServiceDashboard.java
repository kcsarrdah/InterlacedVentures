/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views.dashBoards;

import static interlacedventures.InterlacedVentures.ServicePrices;
import java.awt.Desktop;
import java.io.File;
import java.util.Date;
import java.util.HashMap;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import models.AuditOrderDirectory;
import models.AuditingOrder;
import models.BillsDirectory;
import models.EmployeeDirectory;
import models.OrdersDirectory;
import models.RawMaterialDirectory;
import models.RentalOrder;
import models.RentalOrderDirectory;
import models.StorageDirectory;
import models.TransportDirectory;
import models.bills;
import models.orders;
import views.forms.CATaxationForm;
import views.forms.FileComplainForm;
import views.forms.postAJobFormBusiness;

/**
 *
 * @author kcsar
 */
public class ServiceDashboard extends javax.swing.JFrame {

    /**
     * Creates new form ServiceDashboard
     */
    public ServiceDashboard() {
        initComponents();
    }
    
    private static String filepath1 = "";

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jYearChooser1 = new com.toedter.calendar.JYearChooser();
        jPanel1 = new javax.swing.JPanel();
        jcEnterprise = new javax.swing.JComboBox<>();
        jcOrg = new javax.swing.JComboBox<>();
        jcService = new javax.swing.JComboBox<>();
        btnHFL = new javax.swing.JButton();
        btnPlaceOrder = new javax.swing.JButton();
        labelName = new javax.swing.JLabel();
        tfPrice = new javax.swing.JTextField();
        lblPrice = new javax.swing.JLabel();
        tfDetails = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnComplain = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        pnlTableDisplay = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDisplay = new javax.swing.JTable();
        btnView = new javax.swing.JButton();
        btnRent = new javax.swing.JButton();
        btnBookApt = new javax.swing.JButton();
        btnViewFile = new javax.swing.JButton();
        btnFile = new javax.swing.JButton();
        btnPlaceReq = new javax.swing.JButton();
        btnBuyRawMats = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(225, 238, 250));

        jcEnterprise.setFont(jcEnterprise.getFont().deriveFont(jcEnterprise.getFont().getSize()+5f));
        jcEnterprise.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Technology", "Operations", "Finances and Legal", " " }));
        jcEnterprise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcEnterpriseActionPerformed(evt);
            }
        });

        jcOrg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcOrgActionPerformed(evt);
            }
        });

        jcService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcServiceActionPerformed(evt);
            }
        });

        btnHFL.setFont(new java.awt.Font("InaiMathi", 0, 14)); // NOI18N
        btnHFL.setText("Hire A FreeLancer");
        btnHFL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHFLActionPerformed(evt);
            }
        });

        btnPlaceOrder.setFont(new java.awt.Font("InaiMathi", 0, 14)); // NOI18N
        btnPlaceOrder.setText("Place An Order");
        btnPlaceOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlaceOrderActionPerformed(evt);
            }
        });

        labelName.setFont(new java.awt.Font("Beirut", 1, 18)); // NOI18N
        labelName.setText("Name:");

        tfPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfPriceActionPerformed(evt);
            }
        });

        lblPrice.setFont(new java.awt.Font("InaiMathi", 1, 18)); // NOI18N
        lblPrice.setText("Price");

        tfDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfDetailsActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("InaiMathi", 1, 18)); // NOI18N
        jLabel2.setText("Details");

        btnComplain.setFont(new java.awt.Font("InaiMathi", 0, 18)); // NOI18N
        btnComplain.setText("File A Complain");
        btnComplain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComplainActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("InaiMathi", 0, 18)); // NOI18N
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        tblDisplay.setFont(new java.awt.Font("InaiMathi", 1, 14)); // NOI18N
        tblDisplay.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Job Description", "Date Posted", "Contacted By"
            }
        ));
        jScrollPane1.setViewportView(tblDisplay);

        javax.swing.GroupLayout pnlTableDisplayLayout = new javax.swing.GroupLayout(pnlTableDisplay);
        pnlTableDisplay.setLayout(pnlTableDisplayLayout);
        pnlTableDisplayLayout.setHorizontalGroup(
            pnlTableDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTableDisplayLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 492, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlTableDisplayLayout.setVerticalGroup(
            pnlTableDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
        );

        btnView.setFont(new java.awt.Font("InaiMathi", 0, 18)); // NOI18N
        btnView.setText("View ");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnRent.setFont(new java.awt.Font("InaiMathi", 0, 18)); // NOI18N
        btnRent.setText("Rent");
        btnRent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRentActionPerformed(evt);
            }
        });

        btnBookApt.setFont(new java.awt.Font("InaiMathi", 0, 18)); // NOI18N
        btnBookApt.setText("Book An Appointment");
        btnBookApt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookAptActionPerformed(evt);
            }
        });

        btnViewFile.setFont(new java.awt.Font("InaiMathi", 0, 18)); // NOI18N
        btnViewFile.setText("View File");
        btnViewFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewFileActionPerformed(evt);
            }
        });

        btnFile.setFont(new java.awt.Font("InaiMathi", 0, 18)); // NOI18N
        btnFile.setText("Upload Your File for Auditing");
        btnFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFileActionPerformed(evt);
            }
        });

        btnPlaceReq.setFont(new java.awt.Font("InaiMathi", 0, 18)); // NOI18N
        btnPlaceReq.setText("Place Request");
        btnPlaceReq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlaceReqActionPerformed(evt);
            }
        });

        btnBuyRawMats.setFont(new java.awt.Font("InaiMathi", 0, 18)); // NOI18N
        btnBuyRawMats.setText("Buy");
        btnBuyRawMats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuyRawMatsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tfDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(lblPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(tfPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRent, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(btnBuyRawMats, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelName, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jcEnterprise, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(pnlTableDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jcOrg, 0, 179, Short.MAX_VALUE)
                                            .addComponent(jcService, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(315, 315, 315)
                                                .addComponent(btnFile, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addComponent(btnViewFile, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(94, 94, 94))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(44, 44, 44))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addComponent(btnPlaceOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(74, 74, 74)))))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnComplain, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnHFL, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnBookApt, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(34, 34, 34)
                                        .addComponent(btnPlaceReq)))))
                        .addGap(7, 7, 7))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlTableDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(labelName, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jcEnterprise, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jcOrg, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(jcService, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)
                        .addComponent(btnView)
                        .addGap(73, 73, 73)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnComplain, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(53, 53, 53))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBookApt)
                            .addComponent(btnFile))
                        .addGap(62, 62, 62)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnPlaceReq)
                            .addComponent(btnViewFile))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRent)
                            .addComponent(btnBuyRawMats))
                        .addGap(82, 82, 82)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnHFL)
                            .addComponent(btnPlaceOrder))))
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1027, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jcEnterpriseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcEnterpriseActionPerformed
        // TODO add your handling code here:
        
        try{
            jcOrg.removeAllItems();
        
        if(jcEnterprise.getSelectedItem().toString().equals("Technology")){
                jcOrg.addItem("Software");
                jcOrg.addItem("Cloud");
                jcOrg.addItem("Hardware");
                
                btnPlaceOrder.show();
                lblPrice.setVisible(true);
                pnlTableDisplay.setVisible(false);
                btnBookApt.hide();
                btnBuyRawMats.hide();
                btnRent.hide();
                btnPlaceReq.hide();
                btnViewFile.hide();
                jcService.setVisible(true);
                btnView.setVisible(false);
                btnFile.setVisible(false);
               
                
            }
        else if(jcEnterprise.getSelectedItem().toString().equals("Operations")){
                jcOrg.addItem("Storage");
                jcOrg.addItem("Transport");
                jcOrg.addItem("Raw Materials");
                
                btnRent.show();
                btnFile.setVisible(false);
                pnlTableDisplay.setVisible(true);
                btnBookApt.setVisible(false);
                btnViewFile.setVisible(false);
                btnView.setVisible(true);
                btnPlaceOrder.hide();
                lblPrice.setVisible(false);
                tfPrice.setVisible(false);
                jcService.setVisible(true);
        }
        else if(jcEnterprise.getSelectedItem().toString().equals("Finances and Legal")){
            jcOrg.addItem("Consultancy");
            
            pnlTableDisplay.hide();
            btnRent.hide();
            btnPlaceOrder.hide();
            btnFile.show();
            btnViewFile.show();
            jcService.setVisible(true);
            btnView.setVisible(false);
                
            }
        }
        catch(Exception e){
            
        }

        
    }//GEN-LAST:event_jcEnterpriseActionPerformed

    private void jcServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcServiceActionPerformed
        // TODO add your handling code here:
        
        if(!jcService.getSelectedItem().toString().isEmpty()){
            tfPrice.setText(ServicePrices.get(jcService.getSelectedItem().toString()).toString());
            tfPrice.setEditable(false);
        }

        
        
    }//GEN-LAST:event_jcServiceActionPerformed

    private void jcOrgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcOrgActionPerformed
        // TODO add your handling code here:
        
        try{
            jcService.removeAllItems();
        if(jcOrg.getSelectedItem().toString().equals("Software")){
                jcService.addItem("Web Design");
                jcService.addItem("Video Game");
                jcService.addItem("Cyber-Security");
                jcService.addItem("Software Developement");
                jcService.addItem("Mobile Developement");
                jcService.addItem("Version Control");
                jcService.addItem("Data Analysis");
                jcService.addItem("Data Management");
                jcService.addItem("Business Intelligence");
                jcService.addItem("Machine Learning");
                tfPrice.setVisible(true);
                jcService.setVisible(true);
            }
        else if(jcOrg.getSelectedItem().toString().equals("Hardware")){
                jcService.addItem("Aurdino UNO");
                jcService.addItem("BeagleBoard X1");
                jcService.addItem("featherboards");
                jcService.addItem("Aurdino naro");
                jcService.addItem("Seeduino");
                jcService.addItem("Pocketbeagle");
                tfPrice.setVisible(true);
                jcService.setVisible(true);
        }
        else if(jcOrg.getSelectedItem().toString().equals("Cloud")){
                jcService.addItem("Saas");
                jcService.addItem("PaaS");
                jcService.addItem("FaaS");
                jcService.addItem("Servers");
                tfPrice.setVisible(true);
                jcService.setVisible(true);
        }
        
        else if(jcOrg.getSelectedItem().toString().equals("Storage")){
            jcService.addItem("Lockers");
            jcService.addItem("WareHouse");
            jcService.addItem("Cold Storage");
            jcService.addItem("Fragile Items Storage");
            tfPrice.setVisible(false);
            jcService.setVisible(true);
        }
        else if(jcOrg.getSelectedItem().toString().equals("Transport")){
            jcService.addItem("Cars");
            jcService.addItem("Trucks");
            jcService.addItem("Refridgeration Transport vehicle");
            jcService.addItem("Fragile Items Transport");
            tfPrice.setVisible(false);
            jcService.setVisible(true);
        }
        else if(jcOrg.getSelectedItem().toString().equals("Raw Materials")){
            jcService.setVisible(false);
            tfPrice.setVisible(false);
            btnBuyRawMats.setVisible(true);
            btnFile.setVisible(false);
            btnViewFile.setVisible(false);
            jcService.addItem("Aluminium");
            jcService.addItem("Copper");
            jcService.addItem("Rubber");
            jcService.addItem("Plastics");
            jcService.addItem("Tungsten");
            jcService.addItem("Gallium");
            jcService.addItem("Wood");
            jcService.addItem("Germanium");
            jcService.addItem("Titanium");
            jcService.addItem("Indium");
            jcService.addItem("Bauxite");
            jcService.addItem("Steel");
            jcService.addItem("Coal");
            jcService.addItem("Stainless Steel");
            jcService.addItem("Nickle");
            jcService.addItem("Phosphorous");
            jcService.addItem("Tin");
            jcService.addItem("Marble");
            jcService.addItem("Wool");
            jcService.addItem("Rice");
            jcService.addItem("Silver");
            jcService.addItem("Sugar");
            jcService.addItem("Wheat");
            jcService.addItem("Zinc");
            jcService.addItem("Water");
            jcService.addItem("Tea");
            jcService.addItem("Sand");
            jcService.addItem("Cotton");
            jcService.addItem("Salt");
            jcService.addItem("Petroleum");
            
            
        }
        else if(jcOrg.getSelectedItem().toString().equals("Consultancy")){
            jcService.addItem("Auditing");
            jcService.addItem("Taxation");
            tfPrice.setVisible(true);
            lblPrice.setVisible(true);
            btnBookApt.setVisible(true);
            btnPlaceReq.setVisible(true);
            jcService.setVisible(true);
            } 
        }
        catch(Exception e){
        }
        
    }//GEN-LAST:event_jcOrgActionPerformed

    private void btnHFLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHFLActionPerformed
        // TODO add your handling code here:
        postAJobFormBusiness pj = new postAJobFormBusiness();
        pj.lbName.setText(labelName.getText());
        pj.show();
    }//GEN-LAST:event_btnHFLActionPerformed

    private void btnPlaceOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlaceOrderActionPerformed
        // TODO add your handling code here:
        orders order = new orders(jcOrg.getSelectedItem().toString(),
                "", 
                jcService.getSelectedItem().toString(),
                this.labelName.getText(),
                this.jcEnterprise.getSelectedItem().toString(),
                "Placed",
                new Date(),
                Float.parseFloat(this.tfPrice.getText()),
                this.tfDetails.getText());
        
        
        OrdersDirectory.getInstance().addOrder(order);
        JOptionPane.showMessageDialog(this, "Order Placed Successfully!");
    }//GEN-LAST:event_btnPlaceOrderActionPerformed

    private void tfPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfPriceActionPerformed

    private void tfDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfDetailsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfDetailsActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.hide();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnComplainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComplainActionPerformed
        // TODO add your handling code here:
        FileComplainForm fcf = new FileComplainForm();
        fcf.labelFromName.setText(labelName.getText());
        fcf.jcDept.addItem("Orders");
        fcf.jcDept.addItem("Bills");
        fcf.jcDept.addItem("FreeLancers");
        fcf.show();
    }//GEN-LAST:event_btnComplainActionPerformed

    private void btnFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFileActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        int selected = fileChooser.showOpenDialog(this);
        try{
            if(selected == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                filepath1 = file.getAbsolutePath();
                //txtFile.setText(filepath1);
            } 
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null, "File Not Uploaded");
        }
    }//GEN-LAST:event_btnFileActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        if(jcOrg.getSelectedItem().toString().equals("Storage")){
            if(jcService.getSelectedItem().toString().equals("Lockers")){
        String[][] rows = new String[StorageDirectory.getInstance().getStorageDir().size()][3];
        String[] columnNames = {"Type", "Rate", "StorageID"};
        int j = 0;
        
        for(int i=0; i < StorageDirectory.getInstance().getStorageDir().size(); i++){
            if(StorageDirectory.getInstance().getStorageDir().get(i).isAvailability() && StorageDirectory.getInstance().getStorageDir().get(i).getType().equals("Locker")) {
                rows[j][0] = StorageDirectory.getInstance().getStorageDir().get(i).getType();
                rows[j][1] = Float.toString(StorageDirectory.getInstance().getStorageDir().get(i).getRate()); 
                rows[j][2] = Integer.toString(StorageDirectory.getInstance().getStorageDir().get(i).getStorageID());
                j++;
            }
        }
        DefaultTableModel model = new DefaultTableModel (rows, columnNames);
        tblDisplay.setModel(model);
        }
        
        else if(jcService.getSelectedItem().toString().equals("WareHouse")){
        String[][] rows = new String[StorageDirectory.getInstance().getStorageDir().size()][3];
        String[] columnNames = {"Type", "Rate", "StorageID"};
        int j = 0;
        for(int i=0; i < StorageDirectory.getInstance().getStorageDir().size(); i++){
            if(StorageDirectory.getInstance().getStorageDir().get(i).isAvailability() && StorageDirectory.getInstance().getStorageDir().get(i).getType().equals("WareHouse")) {
                rows[j][0] = StorageDirectory.getInstance().getStorageDir().get(i).getType();
                rows[j][1] = Float.toString(StorageDirectory.getInstance().getStorageDir().get(i).getRate()); 
                rows[j][2] = Integer.toString(StorageDirectory.getInstance().getStorageDir().get(i).getStorageID());
                
                j++;
            }
        }
        DefaultTableModel model = new DefaultTableModel (rows, columnNames);
        tblDisplay.setModel(model);
        }
        
        
        else if(jcService.getSelectedItem().toString().equals("Cold Storage")){
        String[][] rows = new String[StorageDirectory.getInstance().getStorageDir().size()][3];
        String[] columnNames = {"Type", "Size", "StorageId"};
        int j = 0;
        for(int i=0; i < StorageDirectory.getInstance().getStorageDir().size(); i++){
            if(StorageDirectory.getInstance().getStorageDir().get(i).isAvailability() && StorageDirectory.getInstance().getStorageDir().get(i).getType().equals("ColdStorage")) {
                rows[j][0] = StorageDirectory.getInstance().getStorageDir().get(i).getType();
                rows[j][1] = StorageDirectory.getInstance().getStorageDir().get(i).getSize();
                rows[j][2] = Integer.toString(StorageDirectory.getInstance().getStorageDir().get(i).getStorageID()); 
                j++;
            }
        }
        DefaultTableModel model = new DefaultTableModel (rows, columnNames);
        tblDisplay.setModel(model);
        }
        
        else if(jcService.getSelectedItem().toString().equals("Fragile Items Storage")){
        String[][] rows = new String[StorageDirectory.getInstance().getStorageDir().size()][4];
        String[] columnNames = {"Type", "Rate", "StorageId"};
        int j = 0;
        for(int i=0; i < StorageDirectory.getInstance().getStorageDir().size(); i++){
            if(StorageDirectory.getInstance().getStorageDir().get(i).isAvailability() && StorageDirectory.getInstance().getStorageDir().get(i).getType().equals("Fragile Storage")) {
                rows[j][0] = StorageDirectory.getInstance().getStorageDir().get(i).getType();
                rows[j][1] = Float.toString(StorageDirectory.getInstance().getStorageDir().get(i).getRate()); 
                rows[j][2] = Integer.toString(StorageDirectory.getInstance().getStorageDir().get(i).getStorageID()); 
                j++;
            }
        }
        DefaultTableModel model = new DefaultTableModel (rows, columnNames);
        tblDisplay.setModel(model);
            }
        }
        
        else if(jcOrg.getSelectedItem().toString().equals("Transport")){
            if(jcService.getSelectedItem().toString().equals("Cars")){
            String[][] rows = new String[TransportDirectory.getInstance().getTransportDir().size()][5];
            String[] columnNames = {"Type", "Vehicle Number", "Category", "Model", "Rate"};
            int j = 0;
            for(int i=0; i < TransportDirectory.getInstance().getTransportDir().size(); i++){
                if(TransportDirectory.getInstance().getTransportDir().get(i).isAvailability() && TransportDirectory.getInstance().getTransportDir().get(i).getType().equals("Cars")) {
                    rows[j][0] = TransportDirectory.getInstance().getTransportDir().get(i).getType();
                    rows[j][1] = TransportDirectory.getInstance().getTransportDir().get(i).getVehicleNumber(); 
                    rows[j][2] = TransportDirectory.getInstance().getTransportDir().get(i).getCategory();
                    rows[j][3] = TransportDirectory.getInstance().getTransportDir().get(i).getModel();
                    rows[j][4] = Float.toString(TransportDirectory.getInstance().getTransportDir().get(i).getRate()); 
                    j++;
                }
        }
        DefaultTableModel model = new DefaultTableModel (rows, columnNames);
        tblDisplay.setModel(model);
            }
            
            else if(jcService.getSelectedItem().toString().equals("Trucks")){
            String[][] rows = new String[TransportDirectory.getInstance().getTransportDir().size()][5];
            String[] columnNames = {"Type", "Vehicle Number", "Category", "Model", "Rate"};
            int j = 0;
            for(int i=0; i < TransportDirectory.getInstance().getTransportDir().size(); i++){
                if(TransportDirectory.getInstance().getTransportDir().get(i).isAvailability() && TransportDirectory.getInstance().getTransportDir().get(i).getType().equals("Trucks")) {
                    rows[j][0] = TransportDirectory.getInstance().getTransportDir().get(i).getType();
                    rows[j][1] = TransportDirectory.getInstance().getTransportDir().get(i).getVehicleNumber(); 
                    rows[j][2] = TransportDirectory.getInstance().getTransportDir().get(i).getCategory();
                    rows[j][3] = TransportDirectory.getInstance().getTransportDir().get(i).getModel();
                    rows[j][4] = Float.toString(TransportDirectory.getInstance().getTransportDir().get(i).getRate()); 
                    j++;
                }
        }
        DefaultTableModel model = new DefaultTableModel (rows, columnNames);
        tblDisplay.setModel(model);
            }
            else if(jcService.getSelectedItem().toString().equals("Refridgeration Transport vehicle")){
            String[][] rows = new String[TransportDirectory.getInstance().getTransportDir().size()][5];
            String[] columnNames = {"Type", "Vehicle Number", "Category", "Model", "Rate"};
            int j = 0;
            for(int i=0; i < TransportDirectory.getInstance().getTransportDir().size(); i++){
                if(TransportDirectory.getInstance().getTransportDir().get(i).isAvailability() && TransportDirectory.getInstance().getTransportDir().get(i).getCarClass().equals("Refridgeration Transport vehicle")) {
                    rows[j][0] = TransportDirectory.getInstance().getTransportDir().get(i).getType();
                    rows[j][1] = TransportDirectory.getInstance().getTransportDir().get(i).getVehicleNumber(); 
                    rows[j][2] = TransportDirectory.getInstance().getTransportDir().get(i).getCategory();
                    rows[j][3] = TransportDirectory.getInstance().getTransportDir().get(i).getModel();
                    rows[j][4] = Float.toString(TransportDirectory.getInstance().getTransportDir().get(i).getRate()); 
                    j++;
                }
        }
        DefaultTableModel model = new DefaultTableModel (rows, columnNames);
        tblDisplay.setModel(model);
            }
            
        else if(jcService.getSelectedItem().toString().equals("Fragile Items Transport")){
            String[][] rows = new String[TransportDirectory.getInstance().getTransportDir().size()][5];
            String[] columnNames = {"Type", "Vehicle Number", "Category", "Model", "Rate"};
            int j = 0;
            for(int i=0; i < TransportDirectory.getInstance().getTransportDir().size(); i++){
                if(TransportDirectory.getInstance().getTransportDir().get(i).isAvailability() && TransportDirectory.getInstance().getTransportDir().get(i).getCarClass().equals("Fragile Items Transport")) {
                    rows[j][0] = TransportDirectory.getInstance().getTransportDir().get(i).getType();
                    rows[j][1] = TransportDirectory.getInstance().getTransportDir().get(i).getVehicleNumber(); 
                    rows[j][2] = TransportDirectory.getInstance().getTransportDir().get(i).getCategory();
                    rows[j][3] = TransportDirectory.getInstance().getTransportDir().get(i).getModel();
                    rows[j][4] = Float.toString(TransportDirectory.getInstance().getTransportDir().get(i).getRate()); 
                    j++;
                }
        }
        DefaultTableModel model = new DefaultTableModel (rows, columnNames);
        tblDisplay.setModel(model);
            }
            
        }
        
        else if(jcOrg.getSelectedItem().toString().equals("Raw Materials")) {
            System.out.println("heree");
            String[][] rows = new String[RawMaterialDirectory.getInstance().getRawMaterialDir().size()][3];
            String[] columnNames = {"Type", "Quantity", "Price"};
            int j = 0;
            for(int i=0; i < RawMaterialDirectory.getInstance().getRawMaterialDir().size(); i++){
                rows[j][0] = RawMaterialDirectory.getInstance().getRawMaterialDir().get(i).getType();
                rows[j][1] = "100";
                rows[j][2] = Float.toString(RawMaterialDirectory.getInstance().getRawMaterialDir().get(i).getPrice());
                j++;
        }
        DefaultTableModel model = new DefaultTableModel (rows, columnNames);
        tblDisplay.setModel(model);

        } 

            
//            
//            else if(jcService.getSelectedItem().toString().equals("Taxation")){
//            String[][] rows = new String[TransportDirectory.getInstance().getTransportDir().size()][5];
//            String[] columnNames = {"Type", "Vehicle Number", "Category", "Model", "Rate"};
//            int j = 0;
//            for(int i=0; i < TransportDirectory.getInstance().getTransportDir().size(); i++){
//                if(TransportDirectory.getInstance().getTransportDir().get(i).isAvailability() && TransportDirectory.getInstance().getTransportDir().get(i).getType().equals("Trucks")) {
//                    rows[j][0] = TransportDirectory.getInstance().getTransportDir().get(i).getType();
//                    rows[j][1] = TransportDirectory.getInstance().getTransportDir().get(i).getVehicleNumber(); 
//                    rows[j][2] = TransportDirectory.getInstance().getTransportDir().get(i).getCategory();
//                    rows[j][3] = TransportDirectory.getInstance().getTransportDir().get(i).getModel();
//                    rows[j][4] = Float.toString(TransportDirectory.getInstance().getTransportDir().get(i).getRate()); 
//                    j++;
//                }
//        }
//        DefaultTableModel model = new DefaultTableModel (rows, columnNames);
//        tblDisplay.setModel(model);
//            }
//        }
           
//        }
//        else if(jcOrg.getSelectedItem().toString().equals("")){
//            
//            
//        }
        
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnRentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRentActionPerformed
        // TODO add your handling code here:
        if(jcOrg.getSelectedItem().toString().equals("Storage")){
            DefaultTableModel tableModel = (DefaultTableModel) tblDisplay.getModel();
            String id = tableModel.getValueAt(tblDisplay.getSelectedRow(), 2).toString();
            int ItemID  = Integer.parseInt(id);
            
            for(int i = 0; i < StorageDirectory.getInstance().getStorageDir().size(); i++){ 
                if(StorageDirectory.getInstance().getStorageDir().get(i).getStorageID() == ItemID){
                    int no = (int)Math.floor(Math.random()*(999999 - 100000 + 1) + 100000);
                    
                       RentalOrder ro = new RentalOrder(
                               Integer.toString(no),
                               labelName.getText(),
                               "Operations",
                               jcService.getSelectedItem().toString(),
                               new Date(),
                               ItemID,
                               "Requested",
                               0);
                       
                       RentalOrderDirectory.getInstance().addRentalOrder(ro);
                       break;
                }
            }
        }
        else if(jcOrg.getSelectedItem().toString().equals("Transport")){
            DefaultTableModel tableModel = (DefaultTableModel) tblDisplay.getModel();
            String id = tableModel.getValueAt(tblDisplay.getSelectedRow(), 1).toString();
            int ItemID  = Integer.parseInt(id);
            
            for(int i = 0; i < TransportDirectory.getInstance().getTransportDir().size(); i++){ 
                if(TransportDirectory.getInstance().getTransportDir().get(i).getVehicleNumber().equals(id)){
                    int no = (int)Math.floor(Math.random()*(999999 - 100000 + 1) + 100000);
                       RentalOrder ro = new RentalOrder(
                               Integer.toString(no),
                               labelName.getText(),
                               "Operations",
                               jcService.getSelectedItem().toString(),
                               new Date(),
                               ItemID,
                               "Requested",
                               0);
                       
                       RentalOrderDirectory.getInstance().addRentalOrder(ro);
                       break;
                }
            }
        }
        
        

    }//GEN-LAST:event_btnRentActionPerformed

    private void btnViewFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewFileActionPerformed
        // TODO add your handling code here:
        try{
            File pdf1 = new File(filepath1);
            if(pdf1.exists()){
                if(Desktop.isDesktopSupported()){
                    Desktop.getDesktop().open(pdf1);
                }
                else{
                    JOptionPane.showMessageDialog(null, "Desktop is not supported");
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "File does not exist");
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_btnViewFileActionPerformed

    private void btnPlaceReqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlaceReqActionPerformed
        // TODO add your handling code here:
        AuditingOrder au = new AuditingOrder(
                filepath1,
                "",
                jcOrg.getSelectedItem().toString(), 
                jcService.getSelectedItem().toString(),
                this.labelName.getText(),
                this.jcEnterprise.getSelectedItem().toString(),
                "Placed",
                new Date(),
                Float.parseFloat(this.tfPrice.getText()),
                this.tfDetails.getText());
        
        AuditOrderDirectory.getInstance().addAuditOrder(au);
        JOptionPane.showMessageDialog(null, "Order Placed");
        
    }//GEN-LAST:event_btnPlaceReqActionPerformed

    private void btnBookAptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookAptActionPerformed
        // TODO add your handling code here:
        CATaxationForm ctf = new CATaxationForm();
        ctf.lblName.setText(labelName.getText());
        ctf.tfNotes.setVisible(false);
        ctf.lblNotes.setVisible(false);
        ctf.btnComplete.setVisible(false);
        ctf.show();
    }//GEN-LAST:event_btnBookAptActionPerformed

    private void btnBuyRawMatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuyRawMatsActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tableModel = (DefaultTableModel) tblDisplay.getModel();
        String Price = tableModel.getValueAt(tblDisplay.getSelectedRow(), 2).toString();
        int no = (int)Math.floor(Math.random()*(999999 - 100000 + 1) + 100000);
        bills bill = new bills(
        labelName.getText(),
                            new Date(), 
                            Float.parseFloat(Price), 
                            "Storage", 
                            "Raw Materials", 
                            no);
        
                            BillsDirectory.getInstance().addBill(bill);
    }//GEN-LAST:event_btnBuyRawMatsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServiceDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServiceDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServiceDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServiceDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServiceDashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnBookApt;
    public javax.swing.JButton btnBuyRawMats;
    private javax.swing.JButton btnComplain;
    public javax.swing.JButton btnFile;
    public javax.swing.JButton btnHFL;
    public javax.swing.JButton btnPlaceOrder;
    public javax.swing.JButton btnPlaceReq;
    public javax.swing.JButton btnRent;
    public javax.swing.JButton btnView;
    public javax.swing.JButton btnViewFile;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JYearChooser jYearChooser1;
    public javax.swing.JComboBox<String> jcEnterprise;
    public javax.swing.JComboBox<String> jcOrg;
    public javax.swing.JComboBox<String> jcService;
    public javax.swing.JLabel labelName;
    public javax.swing.JLabel lblPrice;
    public javax.swing.JPanel pnlTableDisplay;
    public javax.swing.JTable tblDisplay;
    public javax.swing.JTextField tfDetails;
    public javax.swing.JTextField tfPrice;
    // End of variables declaration//GEN-END:variables
}


