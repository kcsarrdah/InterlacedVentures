/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views;

//import com.mysql.cj.xdevapi.Statement;
//import com.sun.jdi.connect.spi.Connection;
import static interlacedventures.InterlacedVentures.Admins;
import javax.swing.JOptionPane;
import views.dashBoards.businessUserDashBoard;
import java.sql.DriverManager;  
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Connection;
import java.text.Format;
import java.text.SimpleDateFormat;
import javax.swing.table.DefaultTableModel;
import models.AuditOrderDirectory;
import views.dashBoards.SystemAdmin;
import views.dashBoards.TechAdminDashboard;
import views.dashBoards.employeeDashboard;
import views.dashBoards.freelancerDashboard;
import models.BusinessUsersDirectory;
import models.EmployeeDirectory;
import models.FreelanceDirectory;
import models.JobsDirectory;
import models.OrdersDirectory;
import models.complainsDirectory;
import models.userDirectory;
import views.dashBoards.FinAndLegalDashBoard;
import views.dashBoards.OperationsAdminDashboard;
import views.dashBoards.customerSalesRepDashboard;
import views.dashBoards.verificationAdminDashboard;

/**
 *
 * @author kcsar
 */
public class loginPage extends javax.swing.JFrame {

    /**
     * Creates new form loginPage
     */
    public loginPage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        topicLabel = new javax.swing.JLabel();
        btnLogin = new javax.swing.JButton();
        btnRegister = new javax.swing.JButton();
        tfUsername = new javax.swing.JTextField();
        pfPassword = new javax.swing.JPasswordField();
        userNameLabel = new javax.swing.JLabel();
        passLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(220, 230, 250));

        topicLabel.setFont(new java.awt.Font("Futura", 1, 36)); // NOI18N
        topicLabel.setText("INTERLACED VENTURES");

        btnLogin.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        btnLogin.setText("Login");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        btnRegister.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        btnRegister.setText("Register");
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });

        tfUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfUsernameActionPerformed(evt);
            }
        });

        pfPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pfPasswordActionPerformed(evt);
            }
        });

        userNameLabel.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        userNameLabel.setText("Username:");

        passLabel.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        passLabel.setText("Password:");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/views/Images/workkkkkkk.gif"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(166, 166, 166)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(userNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passLabel))
                .addGap(74, 74, 74)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(tfUsername)
                        .addComponent(pfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(48, 48, 48)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(topicLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 573, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(83, 83, 83))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(topicLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(userNameLabel))
                        .addGap(45, 45, 45)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passLabel))
                        .addGap(82, 82, 82)
                        .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(92, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        // TODO add your handling code here:
        
        String userName = tfUsername.getText();
        String password = pfPassword.getText();
        int flag = 0;
        
        if(userName.equals(Admins[0][0]) && password.equals(Admins[0][1])){
            flag++;
            this.hide();
            SystemAdmin sa = new SystemAdmin();
            sa.show();
        }
        else if(userName.equals(Admins[1][0]) && password.equals(Admins[1][1])){
            flag++;
            this.hide();
            TechAdminDashboard td = new TechAdminDashboard();
            td.show();
        }
        
        
        
        else if(userName.equals(Admins[2][0]) && password.equals(Admins[2][1])){
            flag++;
            this.hide();
            FinAndLegalDashBoard fldb = new FinAndLegalDashBoard();
            fldb.show();
        }
        
        else if(userName.equals(Admins[3][0]) && password.equals(Admins[3][1])){
            flag++;
            this.hide();
            OperationsAdminDashboard fldb = new OperationsAdminDashboard();
            fldb.show();
        }
        
        
        else if(userName.equals(Admins[4][0]) && password.equals(Admins[4][1])){
            flag++;
        this.hide();
        customerSalesRepDashboard fldb = new customerSalesRepDashboard();
        String[] columnNames = {"Objection", "From", "Against", "Date", "Status"};
        int n = complainsDirectory.getInstance().getComplainsDir().size();
        String[][] rows = new String[n][5];
        int j=0;
        
        for(int i = 0;  i< n; i++){
            if(!complainsDirectory.getInstance().getComplainsDir().get(i).getStatus().equals("Issue Resolved")){
                rows[j][0] = complainsDirectory.getInstance().getComplainsDir().get(i).getDescription();
                rows[j][1] = complainsDirectory.getInstance().getComplainsDir().get(i).getFrom();
                rows[j][2] = complainsDirectory.getInstance().getComplainsDir().get(i).getAgainst();
                Format formatter = new SimpleDateFormat("yyyy-MM-dd");
                String s = formatter.format(complainsDirectory.getInstance().getComplainsDir().get(i).getDate());
                rows[j][3] = s;               
                rows[j][4] = complainsDirectory.getInstance().getComplainsDir().get(i).getStatus();
                j++;
            }
                 
        }
        DefaultTableModel dtm = new DefaultTableModel (rows, columnNames);
        fldb.tableComplains.setModel(dtm);
        fldb.show();
        }
        
        else if(userName.equals(Admins[5][0]) && password.equals(Admins[5][1])){
            flag++;
            this.hide();
            verificationAdminDashboard va = new verificationAdminDashboard();
            va.show();
        }
        
          
        
        
        boolean checkPassword;
        
        for(int i=0;i<userDirectory.getInstance().getUserDir().size();i++) {
            
            checkPassword = password.equals(userDirectory.getInstance().getUserDir().get(i).getPassword());
            
            if((userDirectory.getInstance().getUserDir().get(i).getUsername().equals(userName)) && checkPassword) {
                flag++;
                try{
                    if(userDirectory.getInstance().getUserDir().get(i).getType().equals("Employee")) {
                        this.hide();
                        employeeDashboard edb = new employeeDashboard();
                        String empName = "";
                        String role = "";
                        
                        //for loop to get employee name
                        for(int j = 0; j < EmployeeDirectory.getInstance().getEmployeeDir().size(); j++){
                            if(EmployeeDirectory.getInstance().getEmployeeDir().get(j).getUsername().equals(userName)){
                                empName = EmployeeDirectory.getInstance().getEmployeeDir().get(j).getFirstName();
                                role = EmployeeDirectory.getInstance().getEmployeeDir().get(j).getRole();
                            }
                        }
                        edb.lblEmpName.setText(empName);
                        edb.labelRole.setText(role);
                        
                        
                        //loop to populate CA Tables
                        if(role.equals("Chartered Accountant")){
                            
                            String[] columnNames = {"Description", "Date of Posting", "File"};
                                int n = AuditOrderDirectory.getInstance().getAuditOrderDir().size() + OrdersDirectory.getInstance().getOrdersDir().size();
                                String[][] rows = new String[n][3];
                                int j=0;
                                for(int k = 0;  k < AuditOrderDirectory.getInstance().getAuditOrderDir().size(); k++){
                                    if(AuditOrderDirectory.getInstance().getAuditOrderDir().get(k).getAssignedTo().equals(userName) && !AuditOrderDirectory.getInstance().getAuditOrderDir().get(k).getStatus().equals("Completed")){
                                    rows[j][0] = AuditOrderDirectory.getInstance().getAuditOrderDir().get(k).getDetails();
                                    Format formatter = new SimpleDateFormat("yyyy-MM-dd");
                                    String s = formatter.format(AuditOrderDirectory.getInstance().getAuditOrderDir().get(k).getDate());
                                    rows[j][1] = s;  
                                    rows[j][2] = AuditOrderDirectory.getInstance().getAuditOrderDir().get(k).getAuditPath();
                                    j++;
                                    }
                                }
                                
                                for(int k = 0;  k < OrdersDirectory.getInstance().getOrdersDir().size(); k++){
                                    if(OrdersDirectory.getInstance().getOrdersDir().get(k).getAssignedTo().equals(userName) && !OrdersDirectory.getInstance().getOrdersDir().get(k).getStatus().equals("Completed")){
                                    rows[j][0] = OrdersDirectory.getInstance().getOrdersDir().get(k).getDetails();
                                    Format formatter = new SimpleDateFormat("yyyy-MM-dd");
                                    String s = formatter.format(OrdersDirectory.getInstance().getOrdersDir().get(k).getDate());
                                    rows[j][1] = s;  
                                    rows[j][2] = OrdersDirectory.getInstance().getOrdersDir().get(k).getService();
                                    j++;
                                    }
                                }
                                
                                
                                
                                DefaultTableModel dtm = new DefaultTableModel (rows, columnNames);
                                edb.WorkTable.setModel(dtm);
                                edb.show();
                                break;
                        }
                        
                        else{
                        //for loop to populate table
                                String[] columnNames = {"Description", "Date of Posting"};
                                int n = OrdersDirectory.getInstance().getOrdersDir().size();
                                String[][] rows = new String[n][2];
                                int j=0;
                                for(int k = 0;  k < n ; k++){
                                    if(OrdersDirectory.getInstance().getOrdersDir().get(k).getAssignedTo().equals(empName) && !OrdersDirectory.getInstance().getOrdersDir().get(k).getStatus().equals("Completed")){
                                    rows[j][0] = OrdersDirectory.getInstance().getOrdersDir().get(k).getDetails();
                                    Format formatter = new SimpleDateFormat("yyyy-MM-dd");
                                    String s = formatter.format(OrdersDirectory.getInstance().getOrdersDir().get(k).getDate());
                                    rows[j][1] = s;         
                                    j++;
                                    }
                                }
                                DefaultTableModel dtm = new DefaultTableModel (rows, columnNames);
                                edb.WorkTable.setModel(dtm);
                        
                        edb.show();
                        }
                    }
                    
                else if(userDirectory.getInstance().getUserDir().get(i).getType().equals("Freelancer")) {
                        this.hide();
                        freelancerDashboard fdb = new freelancerDashboard();
                        String name1 = "";
                        for(int j = 0; j < FreelanceDirectory.getInstance().getFreeLancerDir().size(); j++){
                        if(FreelanceDirectory.getInstance().getFreeLancerDir().get(j).getUsername().equals(userName)){
                        name1 = FreelanceDirectory.getInstance().getFreeLancerDir().get(j).getFirstName();
                        }
                    }
                        fdb.labelFreelancer.setText(name1);
                        fdb.show();
                        
                   }
                    
                else if(userDirectory.getInstance().getUserDir().get(i).getType().equals("Business User")) {
                        this.hide();
                        businessUserDashBoard budb = new businessUserDashBoard();
                //System.out.println("here");
                String name = "demo";
                //System.out.println(BusinessUsersDirectory.getInstance().getBusinessUsersDir().size());
                
                for(int j = 0; j < BusinessUsersDirectory.getInstance().getBusinessUsersDir().size(); j++){
                if(BusinessUsersDirectory.getInstance().getBusinessUsersDir().get(j).getName().equals(userName)){
                        name = BusinessUsersDirectory.getInstance().getBusinessUsersDir().get(j).getName();
                    }
                }
                //System.out.println(name);
                budb.businessUser.setText(name);
                budb.show();
                }
                    
                }//end of try
                catch(Exception e) {
                    System.out.println(e);
                }
            }

        }
        if(flag == 0){
            JOptionPane.showMessageDialog(this, "Please Enter Correct Details");
            tfUsername.setText("");
            pfPassword.setText("");
        }
    }//GEN-LAST:event_btnLoginActionPerformed

    private void tfUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfUsernameActionPerformed

    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed
        // TODO add your handling code here:
        this.hide();
        RegistrationChoiceForm rcf = new RegistrationChoiceForm();
        rcf.show();
    }//GEN-LAST:event_btnRegisterActionPerformed

    private void pfPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pfPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pfPasswordActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(loginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(loginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(loginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(loginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new loginPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnRegister;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel passLabel;
    private javax.swing.JPasswordField pfPassword;
    private javax.swing.JTextField tfUsername;
    private javax.swing.JLabel topicLabel;
    private javax.swing.JLabel userNameLabel;
    // End of variables declaration//GEN-END:variables
}
